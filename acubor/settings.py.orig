"""
Django settings for openshift project.

For more information on this file, see
https://docs.djangoproject.com/en/1.6/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.6/ref/settings/
"""
import os
import imp
import urlparse

ON_OPENSHIFT = False
if os.environ.has_key('OPENSHIFT_REPO_DIR'):
    ON_OPENSHIFT = True

ADMINS = (
    ('Abinash Koirala', 'abinash.koirala@acubor.com'),
)

MANAGERS = ADMINS

SITE_ID = 1

BASE_DIR = os.path.dirname(os.path.realpath(__file__))

default_keys = {'SECRET_KEY': 'Signature3rdFloorc$gb-^twq9w(u69hi--%$5xrh!xk(t%hw'}
use_keys = default_keys
if ON_OPENSHIFT:
    imp.find_module('openshiftlibs')
    import openshiftlibs

    use_keys = openshiftlibs.openshift_secure(default_keys)

SECRET_KEY = use_keys['SECRET_KEY']

if ON_OPENSHIFT:
    if os.environ['OPENSHIFT_APP_NAME'] == 'stage':
        DEBUG = True
    else:
        DEBUG = False
else:
    DEBUG = True

# if os.environ.has_key('TEMPORARY_DEBUG_FLAG'):
#     if os.environ['TEMPORARY_DEBUG_FLAG'] == '1':
#         DEBUG = True

TEMPLATE_DEBUG = DEBUG

if DEBUG:
    MEDIA_ROOT = '/Users/mac/Documents/user-uploads/'
    ALLOWED_HOSTS = ['*']
else:
    MEDIA_ROOT = os.path.join(os.environ.get('OPENSHIFT_DATA_DIR'), 'user-uploads')
    if os.environ['OPENSHIFT_APP_NAME'] == 'stage':
        ALLOWED_HOSTS = ['https://stage-acubor.rhcloud.com', '.stage-acubor.rhcloud.com', ]
    else:
        ALLOWED_HOSTS = ['https://www.accment.com', 'https://production-acubor.rhcloud.com', '.accment.com', ]


# Application definition

INSTALLED_APPS = (
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'south',
    'core',
    'users',
    'registration',
    'inventory',
    'voucher',
    'ledger',
    'dayjournal',
    'payroll',
    'bank',
    'report',
    'blog',
    'redactor',
    'mptt',
    'debug_toolbar',
    'pagination',
    'django_sorting',
    'rest_framework',
    'django.contrib.admin',
    'django.contrib.admindocs',
    'django.contrib.humanize',
    'compressor',
    'watson',
)

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'pagination.middleware.PaginationMiddleware',
    'django_sorting.middleware.SortingMiddleware',
    'users.middleware.RoleMiddleware',
    # 'debug_toolbar.middleware.DebugToolbarMiddleware',
)

X_FRAME_OPTIONS = 'SAMEORIGIN'

INTERNAL_IPS = ('127.0.0.1',)

# If you want configure the REDISCLOUD
if 'REDISCLOUD_URL' in os.environ and 'REDISCLOUD_PORT' in os.environ and 'REDISCLOUD_PASSWORD' in os.environ:
    redis_server = os.environ['REDISCLOUD_URL']
    redis_port = os.environ['REDISCLOUD_PORT']
    redis_password = os.environ['REDISCLOUD_PASSWORD']
    CACHES = {
        'default': {
            'BACKEND': 'redis_cache.RedisCache',
            'LOCATION': '%s:%d' % (redis_server, int(redis_port)),
            'OPTIONS': {
                'DB': 0,
                'PARSER_CLASS': 'redis.connection.HiredisParser',
                'PASSWORD': redis_password,
            }
        }
    }
    MIDDLEWARE_CLASSES = ('django.middleware.cache.UpdateCacheMiddleware',) + MIDDLEWARE_CLASSES + (
        'django.middleware.cache.FetchFromCacheMiddleware',)

ROOT_URLCONF = 'urls'

WSGI_APPLICATION = 'wsgi.application'

# List of callables that know how to import templates from various sources.
TEMPLATE_LOADERS = (
    'django.template.loaders.filesystem.Loader',
    'django.template.loaders.app_directories.Loader',
    # 'django.template.loaders.eggs.Loader',
)

TEMPLATE_CONTEXT_PROCESSORS = (
    'django.contrib.auth.context_processors.auth',
    'django.core.context_processors.static',
    'django.core.context_processors.request',
    'django.core.context_processors.media',
    'django.contrib.messages.context_processors.messages',
)

TEMPLATE_DIRS = (
    os.path.join(BASE_DIR, 'templates'),
)

# Database
if ON_OPENSHIFT:
    if os.environ['OPENSHIFT_APP_NAME'] == 'stage':
        url = urlparse.urlparse(os.environ.get('OPENSHIFT_POSTGRESQL_DB_URL'))
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.postgresql_psycopg2',
                'NAME': os.environ['OPENSHIFT_APP_NAME'],
                'USER': url.username,
                'PASSWORD': url.password,
                'HOST': url.hostname,
                'PORT': url.port,
            }
        }
    else:
        url = urlparse.urlparse(os.environ.get('OPENSHIFT_POSTGRESQL_DB_URL'))
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.postgresql_psycopg2',
                'NAME': 'production',
                'USER': 'adminzeumiqn',
                'PASSWORD': 'IfQCRN2W5USA',
                'HOST': '539598f15004462c3200064a-acubor.rhcloud.com',
                'PORT': '55476',
            }
        }
else:
    DATABASES = {
        'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'acubor',
        'USER': 'acubor',
        'PASSWORD': 'password',
        'HOST': 'localhost',  # Empty for localhost through domain sockets or '127.0.0.1' for localhost through TCP.
        'PORT': '5432',  # Set to empty string for default.
    }
    }

# Internationalization
# https://docs.djangoproject.com/en/1.6/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

ADMIN_MEDIA_PREFIX = '/admin_media/'

<<<<<<< Updated upstream
if ON_OPENSHIFT:
    STATIC_ROOT = os.path.join(os.environ.get('OPENSHIFT_REPO_DIR'), 'wsgi', 'static')
else:
    STATIC_ROOT = os.path.join(BASE_DIR, '..', 'static')

STATICFILES_DIRS = (
    STATIC_ROOT,
    os.environ.get('OPENSHIFT_REPO_DIR'),
)

STATIC_URL = '/static/'
=======
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.6/howto/static-files/
STATIC_ROOT = os.path.join(BASE_DIR,'..', 'static')
STATIC_URL = '/static/'

# # Additional locations of static files
# STATICFILES_DIRS = (
#     STATIC_ROOT,
# )
# #
# STATIC_ROOT = os.path.join(BASE_DIR, '..', 'static')
# STATIC_URL = '/static/'
>>>>>>> Stashed changes

STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'compressor.finders.CompressorFinder',
)

SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db'
SESSION_COOKIE_AGE = 6000
SESSION_SAVE_EVERY_REQUEST = True
SESSION_EXPIRE_AT_BROWSER_CLOSE = True

REDACTOR_OPTIONS = {'lang': 'en'}
REDACTOR_UPLOAD = 'redactor_uploads/'

COMPRESS_ENABLED = True
COMPRESS_ROOT = os.path.join(BASE_DIR, '..', 'static')


# A sample logging configuration. The only tangible logging
# performed by this configuration is to send an email to
# the site admins on every HTTP 500 error when DEBUG=False.
# See http://docs.djangoproject.com/en/dev/topics/logging for
# more details on how to customize your logging configuration.
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler',
        }
    },
    'loggers': {
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': True,
        },
    }
}

try:
    from settings_secret import *
except ImportError:
    pass

MEDIA_URL = '/media/'

AUTH_USER_MODEL = 'users.User'

ACCOUNT_ACTIVATION_DAYS = 7
LOGIN_REDIRECT_URL = '/application/'
LOGIN_URL = '/user/login/'
# EMAIL SETTINGS
EMAIL_HOST = 'smtp.zoho.com'
EMAIL_HOST_USER = 'no-reply@accment.com'
EMAIL_HOST_PASSWORD = '064@bct@501'
EMAIL_PORT = 465
EMAIL_USE_TLS = True
EMAIL_BACKEND = 'django_smtp_ssl.SSLEmailBackend'
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

# END EMAIL SETTINGS


AUTHENTICATION_BACKENDS = (
    'users.backends.EmailOrUsernameBackend',
    'django.contrib.auth.backends.ModelBackend'
)


